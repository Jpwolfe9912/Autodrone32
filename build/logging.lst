ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccnPOa0X.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"logging.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	__aeabi_f2d
  18              		.section	.rodata.printLog.str1.4,"aMS",%progbits,1
  19              		.align	2
  20              	.LC0:
  21 0000 25660A00 		.ascii	"%f\012\000"
  22              		.align	2
  23              	.LC1:
  24 0004 25642025 		.ascii	"%d %f %d %u %u %u %u \015\000"
  24      66202564 
  24      20257520 
  24      25752025 
  24      75202575 
  25              		.section	.text.printLog,"ax",%progbits
  26              		.align	1
  27              		.global	printLog
  28              		.arch armv7e-m
  29              		.syntax unified
  30              		.thumb
  31              		.thumb_func
  32              		.fpu fpv5-sp-d16
  34              	printLog:
  35              	.LVL0:
  36              	.LFB187:
  37              		.file 1 "Src/logging.c"
   1:Src/logging.c **** /** @file 		logging.c
   2:Src/logging.c ****  *  @brief
   3:Src/logging.c ****  *  	This file logs data to the terminal if connected.
   4:Src/logging.c ****  *
   5:Src/logging.c ****  *  @author 	Jeremy Wolfe
   6:Src/logging.c ****  *  @date 		07 APR 2022
   7:Src/logging.c ****  */
   8:Src/logging.c **** 
   9:Src/logging.c **** #include "board.h"
  10:Src/logging.c **** 
  11:Src/logging.c **** uint8_t log_count = 0;
  12:Src/logging.c **** char *logData = (char*)0x20011000 ;
  13:Src/logging.c **** 
  14:Src/logging.c **** /* Static Functions */
  15:Src/logging.c **** static void writeLog(char *pLog);
  16:Src/logging.c **** 
  17:Src/logging.c **** /** @brief Prints logging data to OpenLager based on which type of data you want.
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccnPOa0X.s 			page 2


  18:Src/logging.c ****  *
  19:Src/logging.c ****  *	@param logType The type of data you want.
  20:Src/logging.c ****  *  @return Void.
  21:Src/logging.c ****  */
  22:Src/logging.c **** void
  23:Src/logging.c **** printLog(logs_t logType)
  24:Src/logging.c **** {
  38              		.loc 1 24 1 view -0
  39              		.cfi_startproc
  40              		@ args = 0, pretend = 0, frame = 0
  41              		@ frame_needed = 0, uses_anonymous_args = 0
  42              		.loc 1 24 1 is_stmt 0 view .LVU1
  43 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  44              		.cfi_def_cfa_offset 24
  45              		.cfi_offset 4, -24
  46              		.cfi_offset 5, -20
  47              		.cfi_offset 6, -16
  48              		.cfi_offset 7, -12
  49              		.cfi_offset 8, -8
  50              		.cfi_offset 14, -4
  51 0004 86B0     		sub	sp, sp, #24
  52              		.cfi_def_cfa_offset 48
  53 0006 0446     		mov	r4, r0
  25:Src/logging.c **** #ifdef OPENLAGER
  26:Src/logging.c **** 	memset(logData, '\0', LOG_SIZE);
  27:Src/logging.c **** 
  28:Src/logging.c **** 	if(logType < 3)
  29:Src/logging.c **** 	{
  30:Src/logging.c **** 		sprintf(logData, "%d %.3f %d %.3f %.3f %.3f %.3f %.3f %.3f \n",
  31:Src/logging.c **** 				logType,
  32:Src/logging.c **** 				battVoltage,
  33:Src/logging.c **** 				mode,
  34:Src/logging.c **** 				rateCmd[logType],
  35:Src/logging.c **** 				sensors.gyro500Hz[logType],
  36:Src/logging.c **** 				ratePID[logType],
  37:Src/logging.c **** 				attCmd[logType],
  38:Src/logging.c **** 				sensors.attitude500Hz[logType],
  39:Src/logging.c **** 				attPID[logType]);
  40:Src/logging.c **** 	}
  41:Src/logging.c **** 
  42:Src/logging.c **** 
  43:Src/logging.c **** 	if (logType == 3)
  44:Src/logging.c **** 	{
  45:Src/logging.c **** 		sprintf(logData, "%d %f %d %u %u %u %u \r",
  46:Src/logging.c **** 				logType,
  47:Src/logging.c **** 				battVoltage,
  48:Src/logging.c **** 				mode,
  49:Src/logging.c **** 				motor_value[MOTOR1],
  50:Src/logging.c **** 				motor_value[MOTOR2],
  51:Src/logging.c **** 				motor_value[MOTOR3],
  52:Src/logging.c **** 				motor_value[MOTOR4]);
  53:Src/logging.c **** 
  54:Src/logging.c **** 	}
  55:Src/logging.c **** 	writeLog(logData);
  56:Src/logging.c **** 
  57:Src/logging.c **** #else
  58:Src/logging.c **** 	if(logType < 3)
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccnPOa0X.s 			page 3


  54              		.loc 1 58 2 is_stmt 1 view .LVU2
  55              		.loc 1 58 4 is_stmt 0 view .LVU3
  56 0008 0228     		cmp	r0, #2
  57 000a 04D9     		bls	.L5
  58              	.LVL1:
  59              	.L2:
  59:Src/logging.c **** 		{
  60:Src/logging.c **** 			// printf("%d %.3f %d %.3f %.3f %.3f %.3f %.3f %.3f \n",
  61:Src/logging.c **** 			// 		logType,
  62:Src/logging.c **** 			// 		battVoltage,
  63:Src/logging.c **** 			// 		mode,
  64:Src/logging.c **** 			// 		rateCmd[logType],
  65:Src/logging.c **** 			// 		sensors.gyro500Hz[logType],
  66:Src/logging.c **** 			// 		ratePID[logType],
  67:Src/logging.c **** 			// 		attCmd[logType],
  68:Src/logging.c **** 			// 		sensors.attitude500Hz[logType],
  69:Src/logging.c **** 			// 		attPID[logType]);
  70:Src/logging.c ****             printf("%f\n", sensors.attDeg500Hz[logType]);
  71:Src/logging.c **** 		}
  72:Src/logging.c **** 
  73:Src/logging.c **** 
  74:Src/logging.c **** 		if (logType == 3)
  60              		.loc 1 74 3 is_stmt 1 view .LVU4
  61              		.loc 1 74 6 is_stmt 0 view .LVU5
  62 000c 032C     		cmp	r4, #3
  63 000e 10D0     		beq	.L6
  64              	.L1:
  75:Src/logging.c **** 		{
  76:Src/logging.c **** 			printf("%d %f %d %u %u %u %u \r",
  77:Src/logging.c **** 					logType,
  78:Src/logging.c **** 					battVoltage,
  79:Src/logging.c **** 					mode,
  80:Src/logging.c **** 					motor_value[MOTOR1],
  81:Src/logging.c **** 					motor_value[MOTOR2],
  82:Src/logging.c **** 					motor_value[MOTOR3],
  83:Src/logging.c **** 					motor_value[MOTOR4]);
  84:Src/logging.c **** 
  85:Src/logging.c **** 		}
  86:Src/logging.c **** #endif
  87:Src/logging.c **** }
  65              		.loc 1 87 1 view .LVU6
  66 0010 06B0     		add	sp, sp, #24
  67              		.cfi_remember_state
  68              		.cfi_def_cfa_offset 24
  69              		@ sp needed
  70 0012 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
  71              	.LVL2:
  72              	.L5:
  73              		.cfi_restore_state
  70:Src/logging.c **** 		}
  74              		.loc 1 70 13 is_stmt 1 view .LVU7
  70:Src/logging.c **** 		}
  75              		.loc 1 70 47 is_stmt 0 view .LVU8
  76 0016 00F10C03 		add	r3, r0, #12
  77 001a 124A     		ldr	r2, .L7
  78 001c 02EB8303 		add	r3, r2, r3, lsl #2
  70:Src/logging.c **** 		}
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccnPOa0X.s 			page 4


  79              		.loc 1 70 13 view .LVU9
  80 0020 1868     		ldr	r0, [r3]	@ float
  81              	.LVL3:
  70:Src/logging.c **** 		}
  82              		.loc 1 70 13 view .LVU10
  83 0022 FFF7FEFF 		bl	__aeabi_f2d
  84              	.LVL4:
  85 0026 0246     		mov	r2, r0
  86 0028 0B46     		mov	r3, r1
  87 002a 0F48     		ldr	r0, .L7+4
  88 002c FFF7FEFF 		bl	printf
  89              	.LVL5:
  90 0030 ECE7     		b	.L2
  91              	.L6:
  76:Src/logging.c **** 					logType,
  92              		.loc 1 76 4 is_stmt 1 view .LVU11
  80:Src/logging.c **** 					motor_value[MOTOR2],
  93              		.loc 1 80 17 is_stmt 0 view .LVU12
  94 0032 0E4B     		ldr	r3, .L7+8
  95 0034 1D88     		ldrh	r5, [r3]
  81:Src/logging.c **** 					motor_value[MOTOR3],
  96              		.loc 1 81 17 view .LVU13
  97 0036 5E88     		ldrh	r6, [r3, #2]
  82:Src/logging.c **** 					motor_value[MOTOR4]);
  98              		.loc 1 82 17 view .LVU14
  99 0038 9F88     		ldrh	r7, [r3, #4]
  83:Src/logging.c **** 
 100              		.loc 1 83 17 view .LVU15
 101 003a B3F80680 		ldrh	r8, [r3, #6]
  76:Src/logging.c **** 					logType,
 102              		.loc 1 76 4 view .LVU16
 103 003e 0C4B     		ldr	r3, .L7+12
 104 0040 1868     		ldr	r0, [r3]	@ float
 105 0042 FFF7FEFF 		bl	__aeabi_f2d
 106              	.LVL6:
 107 0046 0246     		mov	r2, r0
 108 0048 0B46     		mov	r3, r1
 109 004a CDF81080 		str	r8, [sp, #16]
 110 004e 0397     		str	r7, [sp, #12]
 111 0050 0296     		str	r6, [sp, #8]
 112 0052 0195     		str	r5, [sp, #4]
 113 0054 0749     		ldr	r1, .L7+16
 114 0056 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 115 0058 0091     		str	r1, [sp]
 116 005a 2146     		mov	r1, r4
 117 005c 0648     		ldr	r0, .L7+20
 118 005e FFF7FEFF 		bl	printf
 119              	.LVL7:
 120              		.loc 1 87 1 view .LVU17
 121 0062 D5E7     		b	.L1
 122              	.L8:
 123              		.align	2
 124              	.L7:
 125 0064 00000000 		.word	sensors
 126 0068 00000000 		.word	.LC0
 127 006c 00000000 		.word	motor_value
 128 0070 00000000 		.word	battVoltage
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccnPOa0X.s 			page 5


 129 0074 00000000 		.word	mode
 130 0078 04000000 		.word	.LC1
 131              		.cfi_endproc
 132              	.LFE187:
 134              		.global	logData
 135              		.global	log_count
 136              		.section	.bss.log_count,"aw",%nobits
 139              	log_count:
 140 0000 00       		.space	1
 141              		.section	.data.logData,"aw"
 142              		.align	2
 145              	logData:
 146 0000 00100120 		.word	536940544
 147              		.text
 148              	.Letext0:
 149              		.file 2 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/machine/_de
 150              		.file 3 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/sys/_stdint
 151              		.file 4 "Src/autodrone32.h"
 152              		.file 5 "Src/battery.h"
 153              		.file 6 "Src/logging.h"
 154              		.file 7 "Src/motion/process_commands.h"
 155              		.file 8 "Src/motors.h"
 156              		.file 9 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/stdio.h"
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccnPOa0X.s 			page 6


DEFINED SYMBOLS
                            *ABS*:0000000000000000 logging.c
/var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccnPOa0X.s:19     .rodata.printLog.str1.4:0000000000000000 $d
/var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccnPOa0X.s:26     .text.printLog:0000000000000000 $t
/var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccnPOa0X.s:34     .text.printLog:0000000000000000 printLog
/var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccnPOa0X.s:125    .text.printLog:0000000000000064 $d
/var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccnPOa0X.s:145    .data.logData:0000000000000000 logData
/var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccnPOa0X.s:139    .bss.log_count:0000000000000000 log_count
/var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccnPOa0X.s:140    .bss.log_count:0000000000000000 $d
/var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccnPOa0X.s:142    .data.logData:0000000000000000 $d

UNDEFINED SYMBOLS
__aeabi_f2d
printf
sensors
motor_value
battVoltage
mode
